library(R.utils)
library(RCurl)
library(httr)
library(XML)
rawFilePath <- "../data/raw";
estadoEstacionesBicisUrl <- "https://recursos-data.buenosaires.gob.ar/ckan2/ecobici/estado-ecobici.xml";
estadoEstacionesBicisRawFile <- paste(rawFilePath, "estado-ecobici.xml", sep = "/");
downloadFile(estadoEstacionesBicisUrl, estadoEstacionesBicisRawFile)
estadoEstacionesBicisDoc <- xmlParse(file=estadoEstacionesBicisRawFile);
defaultNamespace <- c( ns="http://bicis.buenosaires.gob.ar/ServiceBicycle.asmx" );
estacionId <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionId", xmlValue, namespaces = defaultNamespace)
estacionNombre <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionNombre", xmlValue, namespaces = defaultNamespace)
bicicletaDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:BicicletaDisponibles", xmlValue, namespaces = defaultNamespace)
estacionDisponible <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionDisponible", xmlValue, namespaces = defaultNamespace)
latitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Latitud", xmlValue, namespaces = defaultNamespace)
longitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Longitud", xmlValue, namespaces = defaultNamespace)
numero <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Numero", xmlValue, namespaces = defaultNamespace)
lugar <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Lugar", xmlValue, namespaces = defaultNamespace)
piso <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Piso", xmlValue, namespaces = defaultNamespace)
anclajesTotales <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesTotales", xmlValue, namespaces = defaultNamespace)
anclajesDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesDisponibles", xmlValue, namespaces = defaultNamespace)
estadoEstacionesBicisDf <- data.frame(estacionId, estacionNombre, bicicletaDisponibles, estacionDisponible, latitud, longitud, numero, lugar, piso, anclajesTotales, anclajesDisponibles, stringsAsFactors = F)
if (nrow(estadoEstacionesBicisDf) != length(xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion", xmlValue, namespaces = defaultNamespace)) ) {
warning("Error al leer el archivo de estado de estaciones: la cantidad de registros leída no coincide con la del archivo.")
}
str(estadoEstacionesBicisDf)
idColumnasConNA <- sapply(estadoEstacionesBicisDf, anyNA);
names(estadoEstacionesBicisDf)[idColumnasConNA]
idColumnasConNA
idColumnasConNA <- sapply(estadoEstacionesBicisDf, anyNA);
idColumnasConNA
nrow(estadoEstacionesBicisDf %>% filter(bicicletaDisponibles != (anclajesTotales - anclajesDisponibles)))
library(dplyr)
nrow(estadoEstacionesBicisDf %>% filter(bicicletaDisponibles != (anclajesTotales - anclajesDisponibles)))
library(plyr)
nrow(estadoEstacionesBicisDf %>% filter(bicicletaDisponibles != (anclajesTotales - anclajesDisponibles)))
print(xtable(estadoEstacionesBicisDf), type="html")
View(estadoEstacionesBicisDf)
1am_2406 <- estadoEstacionesBicisDf
"1am_2406" <- estadoEstacionesBicisDf
sum(estadoEstacionesBicisDf$bicicletaDisponibles)
estadoEstacionesBicisDf$bicicletaDisponibles <- as.numeric(estadoEstacionesBicisDf$bicicletaDisponibles)
sum(estadoEstacionesBicisDf$bicicletaDisponibles)
save(estadoEstacionesBicisDf,file = "estacion.rda")
install.packages("ADGofTest")
library(profileR)
load("~/Dropbox/Bicicletas BA/.RData")
library(R.utils)
install.packages("R.utils")
library(R.utils)
library(RCurl)
library(httr)
library(XML)
library(dplyr)
library(plyr)
rawFilePath <- "../data/raw";
estadoEstacionesBicisUrl <- "https://recursos-data.buenosaires.gob.ar/ckan2/ecobici/estado-ecobici.xml";
estadoEstacionesBicisRawFile <- paste(rawFilePath, "estado-ecobici.xml", sep = "/");
downloadFile(estadoEstacionesBicisUrl, estadoEstacionesBicisRawFile)
estadoEstacionesBicisDoc <- xmlParse(file=estadoEstacionesBicisRawFile);
defaultNamespace <- c( ns="http://bicis.buenosaires.gob.ar/ServiceBicycle.asmx" );
estacionId <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionId", xmlValue, namespaces = defaultNamespace)
estacionNombre <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionNombre", xmlValue, namespaces = defaultNamespace)
bicicletaDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:BicicletaDisponibles", xmlValue, namespaces = defaultNamespace)
estacionDisponible <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionDisponible", xmlValue, namespaces = defaultNamespace)
latitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Latitud", xmlValue, namespaces = defaultNamespace)
longitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Longitud", xmlValue, namespaces = defaultNamespace)
numero <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Numero", xmlValue, namespaces = defaultNamespace)
lugar <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Lugar", xmlValue, namespaces = defaultNamespace)
piso <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Piso", xmlValue, namespaces = defaultNamespace)
anclajesTotales <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesTotales", xmlValue, namespaces = defaultNamespace)
anclajesDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesDisponibles", xmlValue, namespaces = defaultNamespace)
estadoEstacionesBicisDf <- data.frame(estacionId, estacionNombre, bicicletaDisponibles, estacionDisponible, latitud, longitud, numero, lugar, piso, anclajesTotales, anclajesDisponibles, stringsAsFactors = F)
if (nrow(estadoEstacionesBicisDf) != length(xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion", xmlValue, namespaces = defaultNamespace)) ) {
warning("Error al leer el archivo de estado de estaciones: la cantidad de registros leída no coincide con la del archivo.")
}
str(estadoEstacionesBicisDf)
idColumnasConNA <- sapply(estadoEstacionesBicisDf, anyNA);
names(estadoEstacionesBicisDf)[idColumnasConNA]
estadoEstacionesBicisDf$bicicletaDisponibles <- as.numeric(estadoEstacionesBicisDf$bicicletaDisponibles)
View(estadoEstacionesBicisDf)
library(R.utils)
install.packages("R.utils")
library(R.utils)
library(RCurl)
install.packages("RCurl")
library(RCurl)
library(httr)
install.packages("httr")
library(httr)
library(XML)
install.packages("XML")
library(XML)
library(dplyr)
library(plyr)
save(estadoEstacionesBicisDf,file="estaciontest.rdata")
save(estadoEstacionesBicisDf,file="estaciontest.rda")
install.packages("RcppArmadillo")
View(estadoEstacionesBicisDf)
Sys.Date()
Sys.time()
estadoEstacionesBicisDf$fecha <- Sys.time()
bicishistorico <- rbind(bicishistorico,estadoEstacionesBicisDf)
exists(bicihistorico)
exists("bicihistorico")
ifelse(exists("bicihistorico")==FALSE,NULL,bicihistorico)
ifelse(exists("bicihistorico")==FALSE,NULL,bicihistorico)
bicishistorico <- rbind(ifelse(exists("bicihistorico")==FALSE,NULL,bicishistorico),estadoEstacionesBicisDf)
library(R.utils)
library(RCurl)
library(httr)
library(XML)
library(dplyr)
library(plyr)
rawFilePath <- "../data/raw";
estadoEstacionesBicisUrl <- "https://recursos-data.buenosaires.gob.ar/ckan2/ecobici/estado-ecobici.xml";
estadoEstacionesBicisRawFile <- paste(rawFilePath, "estado-ecobici.xml", sep = "/");
downloadFile(estadoEstacionesBicisUrl, estadoEstacionesBicisRawFile)
estadoEstacionesBicisDoc <- xmlParse(file=estadoEstacionesBicisRawFile);
defaultNamespace <- c( ns="http://bicis.buenosaires.gob.ar/ServiceBicycle.asmx" );
estacionId <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionId", xmlValue, namespaces = defaultNamespace)
estacionNombre <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionNombre", xmlValue, namespaces = defaultNamespace)
bicicletaDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:BicicletaDisponibles", xmlValue, namespaces = defaultNamespace)
estacionDisponible <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionDisponible", xmlValue, namespaces = defaultNamespace)
latitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Latitud", xmlValue, namespaces = defaultNamespace)
longitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Longitud", xmlValue, namespaces = defaultNamespace)
numero <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Numero", xmlValue, namespaces = defaultNamespace)
lugar <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Lugar", xmlValue, namespaces = defaultNamespace)
piso <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Piso", xmlValue, namespaces = defaultNamespace)
anclajesTotales <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesTotales", xmlValue, namespaces = defaultNamespace)
anclajesDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesDisponibles", xmlValue, namespaces = defaultNamespace)
estadoEstacionesBicisDf <- data.frame(estacionId, estacionNombre, bicicletaDisponibles, estacionDisponible, latitud, longitud, numero, lugar, piso, anclajesTotales, anclajesDisponibles, stringsAsFactors = F)
if (nrow(estadoEstacionesBicisDf) != length(xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion", xmlValue, namespaces = defaultNamespace)) ) {
warning("Error al leer el archivo de estado de estaciones: la cantidad de registros leída no coincide con la del archivo.")
}
str(estadoEstacionesBicisDf)
idColumnasConNA <- sapply(estadoEstacionesBicisDf, anyNA);
names(estadoEstacionesBicisDf)[idColumnasConNA]
estadoEstacionesBicisDf$bicicletaDisponibles <- as.numeric(estadoEstacionesBicisDf$bicicletaDisponibles)
estadoEstacionesBicisDf$fecha <- Sys.time()
bicishistorico <- estadoEstacionesBicisDf
View(bicishistorico)
View(estadoEstacionesBicisDf)
rawFilePath <- "../data/raw";
estadoEstacionesBicisUrl <- "https://recursos-data.buenosaires.gob.ar/ckan2/ecobici/estado-ecobici.xml";
estadoEstacionesBicisRawFile <- paste(rawFilePath, "estado-ecobici.xml", sep = "/");
downloadFile(estadoEstacionesBicisUrl, estadoEstacionesBicisRawFile)
estadoEstacionesBicisDoc <- xmlParse(file=estadoEstacionesBicisRawFile);
defaultNamespace <- c( ns="http://bicis.buenosaires.gob.ar/ServiceBicycle.asmx" );
estacionId <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionId", xmlValue, namespaces = defaultNamespace)
estacionNombre <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionNombre", xmlValue, namespaces = defaultNamespace)
bicicletaDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:BicicletaDisponibles", xmlValue, namespaces = defaultNamespace)
estacionDisponible <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:EstacionDisponible", xmlValue, namespaces = defaultNamespace)
latitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Latitud", xmlValue, namespaces = defaultNamespace)
longitud <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Longitud", xmlValue, namespaces = defaultNamespace)
numero <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Numero", xmlValue, namespaces = defaultNamespace)
lugar <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Lugar", xmlValue, namespaces = defaultNamespace)
piso <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:Piso", xmlValue, namespaces = defaultNamespace)
anclajesTotales <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesTotales", xmlValue, namespaces = defaultNamespace)
anclajesDisponibles <- xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion/ns:AnclajesDisponibles", xmlValue, namespaces = defaultNamespace)
estadoEstacionesBicisDf <- data.frame(estacionId, estacionNombre, bicicletaDisponibles, estacionDisponible, latitud, longitud, numero, lugar, piso, anclajesTotales, anclajesDisponibles, stringsAsFactors = F)
if (nrow(estadoEstacionesBicisDf) != length(xpathSApply(estadoEstacionesBicisDoc, "//ns:Estacion", xmlValue, namespaces = defaultNamespace)) ) {
warning("Error al leer el archivo de estado de estaciones: la cantidad de registros leída no coincide con la del archivo.")
}
str(estadoEstacionesBicisDf)
idColumnasConNA <- sapply(estadoEstacionesBicisDf, anyNA);
names(estadoEstacionesBicisDf)[idColumnasConNA]
estadoEstacionesBicisDf$bicicletaDisponibles <- as.numeric(estadoEstacionesBicisDf$bicicletaDisponibles)
estadoEstacionesBicisDf$fecha <- Sys.time()
bicishistorico <- rbind(bicihistorico,estadoEstacionesBicisDf)
bicishistorico <- rbind(bicishistorico,estadoEstacionesBicisDf)
View(bicishistorico)
bicishistorico[bicishistorico$estacionNombre=='Retiro',]
